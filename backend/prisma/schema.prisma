// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ENUMS for data consistency
enum UserRole {
  ADMIN
  MANAGER
  TECHNICIAN
}

enum WorkOrderStatus {
  OPEN
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELED
}

enum WorkOrderPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AssetStatus {
  ONLINE
  OFFLINE
}

enum AssetCriticality {
  LOW
  MEDIUM
  HIGH
  IMPORTANT
}

enum PMTriggerType {
  TIME_BASED      // Fixed intervals (daily, weekly, monthly)
  USAGE_BASED     // Based on meter readings (hours, miles, cycles)
  CONDITION_BASED // Based on sensor thresholds
  EVENT_BASED     // Manual triggers or system events
}

enum TaskType {
  INSPECTION
  CLEANING
  LUBRICATION
  REPLACEMENT
  CALIBRATION
  TESTING
  REPAIR
  OTHER
}

enum TaskCompletionStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SKIPPED
  FAILED
}

enum MeterType {
  HOURS           // Operating hours
  MILES           // Distance traveled
  CYCLES          // Number of cycles/operations
  GALLONS         // Fuel consumption
  TEMPERATURE     // Temperature readings
  PRESSURE        // Pressure readings
  VIBRATION       // Vibration levels
  OTHER
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
  INSPECTION
  CALIBRATION
}

enum PortalType {
  MAINTENANCE_REQUEST
  ASSET_REGISTRATION
  EQUIPMENT_INFO
  GENERAL_INQUIRY
  INSPECTION_REPORT
  SAFETY_INCIDENT
}

enum PortalStatus {
  ACTIVE
  INACTIVE
  DRAFT
  ARCHIVED
}

enum SubmissionStatus {
  SUBMITTED
  REVIEWED
  IN_PROGRESS
  COMPLETED
  REJECTED
  ASSIGNED
}

enum FieldType {
  TEXT
  TEXTAREA
  EMAIL
  PHONE
  NUMBER
  SELECT
  MULTI_SELECT
  RADIO
  CHECKBOX
  DATE
  TIME
  DATETIME
  FILE
  IMAGE
  LOCATION
  ASSET_PICKER
  USER_PICKER
  PRIORITY
  RATING
  SIGNATURE
  URL
  CURRENCY
}

enum PortalFieldValidationType {
  REQUIRED
  MIN_LENGTH
  MAX_LENGTH
  MIN_VALUE
  MAX_VALUE
  PATTERN
  EMAIL_FORMAT
  PHONE_FORMAT
  URL_FORMAT
  FILE_SIZE
  FILE_TYPE
}


// MODELS
model User {
  id             Int          @id @default(autoincrement())
  legacyId       Int?         @unique
  email          String       @unique
  name           String
  password       String // Will be hashed
  role           UserRole     @default(TECHNICIAN)
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  workOrders     WorkOrder[]
  
  // New relationships for PM system
  tasksCompleted    WorkOrderTask[] @relation("TaskCompletedBy")
  tasksSigned       WorkOrderTask[] @relation("TaskSignedBy")
  meterReadings     MeterReading[]  @relation("MeterReadingRecordedBy")
  maintenancePerformed MaintenanceHistory[] @relation("MaintenancePerformedBy")
  maintenanceSigned    MaintenanceHistory[] @relation("MaintenanceSignedBy")
  
  // Portal relationships
  portalSubmissionsAssigned PortalSubmission[]
  portalCommunicationsSent  PortalCommunication[]
  
  // Comment relationships
  comments         Comment[] @relation("UserComments")
  editedComments   Comment[] @relation("CommentEdits")

  // Import relationships
  importHistory    ImportHistory[] @relation("ImportHistory")
  rolledBackImports ImportHistory[] @relation("ImportRollback")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id        Int      @id @default(autoincrement())
  legacyId  Int?     @unique
  name      String @unique
  settings  Json?
  users     User[]
  assets    Asset[]
  locations Location[]
  suppliers Supplier[]
  parts     Part[]
  workOrders WorkOrder[]
  pmTasks   PMTask[]
  portals   Portal[]
  importHistory ImportHistory[] @relation("ImportHistory")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Asset {
  id             Int          @id @default(autoincrement())
  legacyId       Int?         @unique
  name           String
  description    String?
  serialNumber   String?
  modelNumber    String?
  manufacturer   String?
  year           Int?
  status         AssetStatus  @default(ONLINE)
  criticality    AssetCriticality @default(MEDIUM)
  barcode        String?
  imageUrl       String?
  attachments    Json?
  locationId     Int
  organizationId Int
  parentId       Int?
  location       Location     @relation(fields: [locationId], references: [id], onDelete: Restrict)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent         Asset?       @relation("AssetHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children       Asset[]      @relation("AssetHierarchy")
  workOrders     WorkOrder[]
  pmSchedules    PMSchedule[]
  
  // New relationships for PM system
  meterReadings     MeterReading[]     
  maintenanceHistory MaintenanceHistory[]
  
  // Portal relationships
  portalSubmissions PortalSubmission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([organizationId])
  @@index([locationId])
  @@index([status])
  @@index([criticality])
  @@index([parentId])
}

model Location {
  id             Int          @id @default(autoincrement())
  legacyId       Int?         @unique
  name           String
  description    String?
  address        String?
  barcode        String?      // QR/Bar code from CSV
  url            String?      // URL from CSV
  organizationId Int
  parentId       Int?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent         Location?    @relation("LocationHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children       Location[]   @relation("LocationHierarchy")
  assets         Asset[]
  
  // Portal relationships
  portalSubmissions PortalSubmission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkOrder {
  id           Int               @id @default(autoincrement())
  legacyId     Int?              @unique
  title        String
  description  String?
  status       WorkOrderStatus   @default(OPEN)
  priority     WorkOrderPriority @default(MEDIUM)
  assetId      Int?
  assignedToId Int?
  asset        Asset?            @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assignedTo   User?             @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // New relationships for PM system
  tasks             WorkOrderTask[]
  maintenanceHistory MaintenanceHistory[]
  
  // Portal relationships
  portalSubmissions PortalSubmission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([organizationId])
  @@index([assetId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
}

model PMSchedule {
  id          Int      @id @default(autoincrement())
  legacyId    Int?     @unique
  title       String
  description String?
  frequency   String // e.g., "daily", "weekly", "monthly" - kept for backwards compatibility
  nextDue     DateTime
  assetId     Int
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  // New relationships for advanced PM system
  triggers           PMTrigger[]
  tasks              PMScheduleTask[]
  maintenanceHistory MaintenanceHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([assetId])
  @@index([nextDue])
  @@index([assetId, nextDue])
}

model Part {
  id             Int       @id @default(autoincrement())
  legacyId       Int?      @unique
  name           String
  description    String?
  sku            String?   @unique
  stockLevel     Int       @default(0)
  reorderPoint   Int       @default(0)
  unitCost       Float?    // Unit Cost from CSV
  totalCost      Float?    // Total Cost from CSV
  barcode        String?   // QR/Bar code from CSV
  location       String?   // Location from CSV (as string reference)
  organizationId Int
  supplierId     Int?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  supplier       Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Supplier {
  id             Int      @id @default(autoincrement())
  legacyId       Int?     @unique
  name           String
  contactInfo    String?
  address        String?
  phone          String?  // Phone number from CSV
  email          String?  // Email from CSV
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parts          Part[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// PM Task Templates - reusable task definitions
model PMTask {
  id               Int      @id @default(autoincrement())
  title            String
  description      String?
  type             TaskType @default(OTHER)
  procedure        String?  // Detailed step-by-step instructions
  safetyRequirements String? // Safety protocols and PPE requirements
  toolsRequired    String?  // Required tools and equipment
  partsRequired    String?  // Comma-separated part SKUs or JSON
  estimatedMinutes Int?     // Estimated completion time
  organizationId   Int
  isActive         Boolean  @default(true)
  
  // Relationships
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  pmScheduleTasks  PMScheduleTask[]
  workOrderTasks   WorkOrderTask[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([organizationId])
  @@index([type])
}

// PM Triggers - advanced scheduling conditions
model PMTrigger {
  id           Int           @id @default(autoincrement())
  type         PMTriggerType
  pmScheduleId Int
  isActive     Boolean       @default(true)
  
  // Time-based trigger fields
  intervalDays    Int?     // For TIME_BASED: interval in days
  intervalWeeks   Int?     // For TIME_BASED: interval in weeks  
  intervalMonths  Int?     // For TIME_BASED: interval in months
  dayOfWeek       Int?     // For TIME_BASED: 0=Sunday, 1=Monday, etc.
  dayOfMonth      Int?     // For TIME_BASED: 1-31
  timeOfDay       String?  // For TIME_BASED: HH:MM format
  
  // Usage-based trigger fields
  meterType       MeterType? // For USAGE_BASED: which meter to track
  thresholdValue  Float?     // For USAGE_BASED/CONDITION_BASED: trigger value
  
  // Condition-based trigger fields
  sensorField     String?    // For CONDITION_BASED: sensor data field name
  comparisonOperator String? // For CONDITION_BASED: "gt", "lt", "eq", "gte", "lte"
  
  // Event-based trigger fields
  eventType       String?    // For EVENT_BASED: event identifier
  
  // Calculation fields
  lastTriggered   DateTime?
  nextDue         DateTime?
  
  // Relationships
  pmSchedule      PMSchedule @relation(fields: [pmScheduleId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([pmScheduleId])
  @@index([type])
  @@index([nextDue])
  @@index([meterType])
}

// Work Order Tasks - checklist items for work orders
model WorkOrderTask {
  id               Int                 @id @default(autoincrement())
  workOrderId      Int
  pmTaskId         Int?                // Optional link to PM task template
  title            String
  description      String?
  procedure        String?             // Task-specific instructions
  orderIndex       Int                 @default(0) // For task ordering
  status           TaskCompletionStatus @default(NOT_STARTED)
  
  // Completion tracking
  completedById    Int?
  completedAt      DateTime?
  notes            String?             // Technician notes
  actualMinutes    Int?                // Actual time spent
  
  // Quality control
  requiresSign     Boolean             @default(false)
  signedById       Int?                // Supervisor signature
  signedAt         DateTime?
  
  // Relationships
  workOrder        WorkOrder           @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  pmTask           PMTask?             @relation(fields: [pmTaskId], references: [id], onDelete: SetNull)
  completedBy      User?               @relation("TaskCompletedBy", fields: [completedById], references: [id], onDelete: SetNull)
  signedBy         User?               @relation("TaskSignedBy", fields: [signedById], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([workOrderId])
  @@index([status])
  @@index([completedById])
  @@index([pmTaskId])
}

// Meter Readings - for tracking equipment usage and triggering PMs
model MeterReading {
  id          Int       @id @default(autoincrement())
  assetId     Int
  meterType   MeterType
  value       Float
  unit        String?   // e.g., "hours", "miles", "cycles", "°F", "PSI"
  readingDate DateTime  @default(now())
  recordedById Int?
  notes       String?
  isAutomatic Boolean   @default(false) // True if recorded by sensors/IoT
  
  // Relationships
  asset       Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
  recordedBy  User?     @relation("MeterReadingRecordedBy", fields: [recordedById], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([assetId, meterType])
  @@index([readingDate])
  @@index([meterType])
  @@index([assetId, meterType, readingDate])
}

// PM Schedule Tasks - junction table for PM schedules and task templates
model PMScheduleTask {
  id           Int      @id @default(autoincrement())
  pmScheduleId Int
  pmTaskId     Int
  orderIndex   Int      @default(0) // Task execution order
  isRequired   Boolean  @default(true)
  
  // Relationships
  pmSchedule   PMSchedule @relation(fields: [pmScheduleId], references: [id], onDelete: Cascade)
  pmTask       PMTask     @relation(fields: [pmTaskId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([pmScheduleId, pmTaskId])
  @@index([pmScheduleId])
  @@index([pmTaskId])
}

// Maintenance History - comprehensive log of all maintenance activities
model MaintenanceHistory {
  id              Int             @id @default(autoincrement())
  assetId         Int
  workOrderId     Int?            // Link to work order if applicable
  pmScheduleId    Int?            // Link to PM schedule if applicable
  type            MaintenanceType
  title           String
  description     String?
  
  // Execution details
  performedById   Int?
  performedAt     DateTime        @default(now())
  durationMinutes Int?
  laborCost       Float?
  partsCost       Float?
  totalCost       Float?
  
  // Completion details
  isCompleted     Boolean         @default(false)
  completedAt     DateTime?
  notes           String?
  attachments     Json?           // File URLs, photos, documents
  
  // Compliance and quality
  signedById      Int?            // Supervisor signature
  signedAt        DateTime?
  complianceNotes String?
  
  // Relationships
  asset           Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)
  workOrder       WorkOrder?      @relation(fields: [workOrderId], references: [id], onDelete: SetNull)
  pmSchedule      PMSchedule?     @relation(fields: [pmScheduleId], references: [id], onDelete: SetNull)
  performedBy     User?           @relation("MaintenancePerformedBy", fields: [performedById], references: [id], onDelete: SetNull)
  signedBy        User?           @relation("MaintenanceSignedBy", fields: [signedById], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([assetId])
  @@index([workOrderId])
  @@index([pmScheduleId])
  @@index([type])
  @@index([performedAt])
  @@index([performedById])
  @@index([isCompleted])
}

// Portal Models
model Portal {
  id                   Int          @id @default(autoincrement())
  name                 String
  description          String?
  type                 PortalType
  status               PortalStatus @default(ACTIVE)
  slug                 String       @unique
  organizationId       Int
  
  // Portal Configuration
  isActive             Boolean      @default(true)
  allowAnonymous       Boolean      @default(true)
  requiresApproval     Boolean      @default(false)
  autoCreateWorkOrders Boolean      @default(true)
  maxSubmissionsPerDay Int?
  
  // URLs and Access
  publicUrl            String?
  qrCodeUrl            String?
  qrEnabled            Boolean      @default(true)
  
  // Branding
  primaryColor         String       @default("#1976d2")
  secondaryColor       String       @default("#ffffff") 
  accentColor          String       @default("#f50057")
  logoUrl              String?
  backgroundImageUrl   String?
  customCss            String?
  
  // Notifications
  notificationEmails   String?      // JSON array of email addresses
  autoResponderEnabled Boolean      @default(true)
  autoResponderMessage String?
  
  // Rate Limiting
  rateLimitEnabled     Boolean      @default(true)
  rateLimitRequests    Int          @default(100)
  rateLimitWindow      Int          @default(3600) // seconds
  
  // Organization relationship
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Related models
  fields               PortalField[]
  submissions          PortalSubmission[]
  analytics            PortalAnalytics[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([organizationId])
  @@index([status])
  @@index([type])
  @@index([slug])
}

model PortalField {
  id           Int       @id @default(autoincrement())
  portalId     Int
  name         String    // Field name/key
  label        String    // Display label
  type         FieldType
  orderIndex   Int       @default(0)
  isRequired   Boolean   @default(false)
  placeholder  String?
  helpText     String?
  
  // Field Options (for select, radio, etc.)
  options      Json?     // Array of options
  
  // Validation Rules
  validations  Json?     // Array of validation rules
  
  // Conditional Logic
  conditionalLogic Json? // Show/hide based on other fields
  
  // Styling
  width        String?   // "full", "half", "third", etc.
  cssClasses   String?
  
  // Relationships
  portal       Portal    @relation(fields: [portalId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([portalId])
  @@index([orderIndex])
}

model PortalSubmission {
  id               Int              @id @default(autoincrement())
  portalId         Int
  trackingCode     String           @unique
  status           SubmissionStatus @default(SUBMITTED)
  
  // Submission Data
  submissionData   Json             // The actual form data
  attachments      Json?            // File uploads
  
  // Submitter Information
  submitterName    String?
  submitterEmail   String?
  submitterPhone   String?
  submitterIp      String?
  userAgent        String?
  
  // Processing Information
  assignedToId     Int?
  reviewNotes      String?
  internalNotes    String?
  reviewedAt       DateTime?
  completedAt      DateTime?
  
  // Integration
  workOrderId      Int?             // Created work order
  assetId          Int?             // Related asset
  locationId       Int?             // Related location
  
  // Priority and Classification
  priority         WorkOrderPriority @default(MEDIUM)
  category         String?
  tags             String?          // Comma-separated tags
  
  // Relationships
  portal           Portal           @relation(fields: [portalId], references: [id], onDelete: Cascade)
  assignedTo       User?            @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  workOrder        WorkOrder?       @relation(fields: [workOrderId], references: [id], onDelete: SetNull)
  asset            Asset?           @relation(fields: [assetId], references: [id], onDelete: SetNull)
  location         Location?        @relation(fields: [locationId], references: [id], onDelete: SetNull)
  communications   PortalCommunication[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([portalId])
  @@index([status])
  @@index([trackingCode])
  @@index([assignedToId])
  @@index([workOrderId])
  @@index([priority])
  @@index([createdAt])
}

model PortalCommunication {
  id                 Int               @id @default(autoincrement())
  submissionId       Int
  message            String
  messageType        String            @default("MESSAGE") // MESSAGE, STATUS_UPDATE, INTERNAL_NOTE
  isInternal         Boolean           @default(false)
  sentById           Int?
  recipientEmail     String?
  emailSent          Boolean           @default(false)
  emailSentAt        DateTime?
  
  // Relationships
  submission         PortalSubmission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  sentBy             User?             @relation(fields: [sentById], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([submissionId])
  @@index([messageType])
  @@index([isInternal])
}

model PortalAnalytics {
  id               Int      @id @default(autoincrement())
  portalId         Int
  date             DateTime @default(now())
  
  // Daily Metrics
  views            Int      @default(0)
  submissions      Int      @default(0)
  completions      Int      @default(0)
  bounceRate       Float?   // Percentage who left without submitting
  avgCompletionTime Int?    // Seconds
  
  // Device/Browser Data
  mobileViews      Int      @default(0)
  desktopViews     Int      @default(0)
  tabletViews      Int      @default(0)
  
  // Traffic Sources
  qrCodeScans      Int      @default(0)
  directAccess     Int      @default(0)
  referralAccess   Int      @default(0)
  
  // Geographic Data (optional)
  country          String?
  region           String?
  city             String?
  
  // Relationships
  portal           Portal   @relation(fields: [portalId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([portalId, date])
  @@index([portalId])
  @@index([date])
}

// Comment System - Universal comments for all entities
model Comment {
  id           Int      @id @default(autoincrement())
  
  // Polymorphic association - allows linking to any entity
  entityType   String   // "workOrder", "asset", "location", "part", "pmSchedule"
  entityId     Int      // ID of the related entity
  
  // Comment content
  content      String   
  isInternal   Boolean  @default(false) // Internal notes vs visible to all
  isPinned     Boolean  @default(false) // Pinned/important comments
  
  // User who created the comment
  userId       Int
  user         User     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  
  // Optional parent for threaded comments
  parentId     Int?
  parent       Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies      Comment[] @relation("CommentReplies")
  
  // Attachments (optional)
  attachments  Json?    // Array of file URLs
  
  // Metadata
  editedAt     DateTime?
  editedById   Int?
  editedBy     User?    @relation("CommentEdits", fields: [editedById], references: [id], onDelete: SetNull)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
  @@index([parentId])
}

// Import History - Track CSV imports for audit and rollback
model ImportHistory {
  id               Int      @id @default(autoincrement())
  importId         String   @unique // Unique identifier for the import batch
  
  // Import metadata
  entityType       String   // Type of entity imported (assets, workorders, etc.)
  fileName         String?  // Original CSV filename
  totalRows        Int      // Total rows in CSV
  importedCount    Int      // Successfully imported records
  skippedCount     Int      // Skipped records due to errors
  
  // Import status
  status           String   @default("COMPLETED") // COMPLETED, FAILED, PARTIAL
  errors           Json?    // Array of error messages
  warnings         Json?    // Array of warning messages
  duplicates       Json?    // Array of duplicate records found
  
  // Column mappings used for import
  columnMappings   Json     // Array of ColumnMapping objects
  
  // User and organization
  userId           Int
  organizationId   Int
  user             User     @relation("ImportHistory", fields: [userId], references: [id], onDelete: Cascade)
  organization     Organization @relation("ImportHistory", fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Rollback information
  canRollback      Boolean  @default(true)
  rolledBack       Boolean  @default(false)
  rolledBackAt     DateTime?
  rolledBackById   Int?
  rolledBackBy     User?    @relation("ImportRollback", fields: [rolledBackById], references: [id], onDelete: SetNull)
  
  // Import execution time
  startedAt        DateTime @default(now())
  completedAt      DateTime?
  durationMs       Int?     // Import duration in milliseconds
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([organizationId])
  @@index([userId])
  @@index([entityType])
  @@index([status])
  @@index([createdAt])
  @@index([importId])
}