generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                      @id @default(autoincrement())
  legacyId                  Int?                     @unique
  email                     String                   @unique
  name                      String
  password                  String
  role                      UserRole                 @default(TECHNICIAN)
  organizationId            Int
  
  // Email verification fields
  emailVerified             Boolean                  @default(false)
  emailVerificationToken    String?                  @unique
  emailVerificationExpires  DateTime?
  
  // Password reset fields
  passwordResetToken        String?                  @unique
  passwordResetExpires      DateTime?
  
  isOnline                  Boolean                  @default(false)
  lastSeen                  DateTime?
  lastActivity              DateTime?
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  editedComments            Comment[]                @relation("CommentEdits")
  comments                  Comment[]                @relation("UserComments")
  rolledBackImports         ImportHistory[]          @relation("ImportRollback")
  importHistory             ImportHistory[]          @relation("ImportHistory")
  maintenancePerformed      MaintenanceHistory[]     @relation("MaintenancePerformedBy")
  maintenanceSigned         MaintenanceHistory[]     @relation("MaintenanceSignedBy")
  meterReadings             MeterReading[]           @relation("MeterReadingRecordedBy")
  createdNotifications      Notification[]           @relation("NotificationCreator")
  notifications             Notification[]           @relation("UserNotifications")
  notificationDevices       NotificationDevice[]
  notificationPreferences   NotificationPreference[]
  portalCommunicationsSent  PortalCommunication[]
  portalSubmissionsAssigned PortalSubmission[]
  moderatedComments         PublicComment[]          @relation("CommentModerator")
  qrBatchOperationsCreated  QRBatchOperation[]       @relation("QRBatchOperationCreator")
  qrCodesCreated            QRCode[]                 @relation("QRCodeCreator")
  qrScanLogs                QRScanLog[]              @relation("QRScanLogs")
  qrTemplatesCreated        QRTemplate[]             @relation("QRTemplateCreator")
  organization              Organization             @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  workOrders                WorkOrder[]
  createdShares             WorkOrderShare[]         @relation("ShareCreator")
  tasksCompleted            WorkOrderTask[]          @relation("TaskCompletedBy")
  tasksSigned               WorkOrderTask[]          @relation("TaskSignedBy")
  timeLogs                  WorkOrderTimeLog[]       @relation("TimeLogUser")
}

model Organization {
  id                Int                @id @default(autoincrement())
  legacyId          Int?               @unique
  name              String             @unique
  settings          Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  assets            Asset[]
  importHistory     ImportHistory[]    @relation("ImportHistory")
  locations         Location[]
  pmTasks           PMTask[]
  parts             Part[]
  portals           Portal[]
  qrBatchOperations QRBatchOperation[]
  qrCodes           QRCode[]
  qrScanLogs        QRScanLog[]
  qrTemplates       QRTemplate[]
  suppliers         Supplier[]
  users             User[]
  workOrders        WorkOrder[]
  workOrderShares   WorkOrderShare[]   @relation("WorkOrderShares")
}

model Asset {
  id                 Int                  @id @default(autoincrement())
  legacyId           Int?                 @unique
  name               String
  description        String?
  serialNumber       String?
  modelNumber        String?
  manufacturer       String?
  year               Int?
  status             AssetStatus          @default(ONLINE)
  criticality        AssetCriticality     @default(MEDIUM)
  barcode            String?
  imageUrl           String?
  attachments        Json?
  locationId         Int
  organizationId     Int
  parentId           Int?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  location           Location             @relation(fields: [locationId], references: [id])
  organization       Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent             Asset?               @relation("AssetHierarchy", fields: [parentId], references: [id])
  children           Asset[]              @relation("AssetHierarchy")
  maintenanceHistory MaintenanceHistory[]
  meterReadings      MeterReading[]
  pmSchedules        PMSchedule[]
  portalSubmissions  PortalSubmission[]
  workOrders         WorkOrder[]

  @@index([organizationId])
  @@index([locationId])
  @@index([status])
  @@index([criticality])
  @@index([parentId])
}

model Location {
  id                Int                @id @default(autoincrement())
  legacyId          Int?               @unique
  name              String
  description       String?
  address           String?
  latitude          Float?
  longitude         Float?
  barcode           String?
  url               String?
  organizationId    Int
  parentId          Int?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  assets            Asset[]
  organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent            Location?          @relation("LocationHierarchy", fields: [parentId], references: [id])
  children          Location[]         @relation("LocationHierarchy")
  portalSubmissions PortalSubmission[]
}

model WorkOrder {
  id                 Int                  @id @default(autoincrement())
  uniqueId           String?              @unique @default(cuid())
  legacyId           Int?                 @unique
  title              String
  description        String?
  status             WorkOrderStatus      @default(OPEN)
  priority           WorkOrderPriority    @default(MEDIUM)
  dueDate            DateTime?
  assetId            Int?
  assignedToId       Int?
  pmScheduleId       Int?
  organizationId     Int
  totalLoggedHours   Float?               @default(0)
  estimatedHours     Float?
  startedAt          DateTime?
  completedAt        DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  attachments        Json?
  maintenanceHistory MaintenanceHistory[]
  portalSubmissions  PortalSubmission[]
  asset              Asset?               @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assignedTo         User?                @relation(fields: [assignedToId], references: [id])
  organization       Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  pmSchedule         PMSchedule?          @relation(fields: [pmScheduleId], references: [id])
  shares             WorkOrderShare[]
  tasks              WorkOrderTask[]
  timeLogs           WorkOrderTimeLog[]

  @@index([organizationId])
  @@index([assetId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@index([pmScheduleId])
}

model PMSchedule {
  id                 Int                  @id @default(autoincrement())
  uniqueId           String?              @unique @default(cuid())
  legacyId           Int?                 @unique
  title              String
  description        String?
  frequency          String
  nextDue            DateTime
  assetId            Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  maintenanceHistory MaintenanceHistory[]
  asset              Asset                @relation(fields: [assetId], references: [id], onDelete: Cascade)
  tasks              PMScheduleTask[]
  triggers           PMTrigger[]
  workOrders         WorkOrder[]

  @@index([assetId])
  @@index([nextDue])
  @@index([assetId, nextDue])
}

model Part {
  id             Int          @id @default(autoincrement())
  legacyId       Int?         @unique
  name           String
  description    String?
  sku            String?      @unique
  stockLevel     Int          @default(0)
  reorderPoint   Int          @default(0)
  unitCost       Float?
  totalCost      Float?
  barcode        String?
  location       String?
  organizationId Int
  supplierId     Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  supplier       Supplier?    @relation(fields: [supplierId], references: [id])
}

model Supplier {
  id             Int          @id @default(autoincrement())
  legacyId       Int?         @unique
  name           String
  contactInfo    String?
  address        String?
  phone          String?
  email          String?
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  parts          Part[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model PMTask {
  id                 Int              @id @default(autoincrement())
  title              String
  description        String?
  type               TaskType         @default(OTHER)
  procedure          String?
  safetyRequirements String?
  toolsRequired      String?
  partsRequired      String?
  estimatedMinutes   Int?
  organizationId     Int
  isActive           Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  pmScheduleTasks    PMScheduleTask[]
  organization       Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  workOrderTasks     WorkOrderTask[]

  @@index([organizationId])
  @@index([type])
}

model PMTrigger {
  id                 Int           @id @default(autoincrement())
  type               PMTriggerType
  pmScheduleId       Int
  isActive           Boolean       @default(true)
  intervalDays       Int?
  intervalWeeks      Int?
  intervalMonths     Int?
  dayOfWeek          Int?
  dayOfMonth         Int?
  timeOfDay          String?
  meterType          MeterType?
  thresholdValue     Float?
  sensorField        String?
  comparisonOperator String?
  eventType          String?
  lastTriggered      DateTime?
  nextDue            DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  pmSchedule         PMSchedule    @relation(fields: [pmScheduleId], references: [id], onDelete: Cascade)

  @@index([pmScheduleId])
  @@index([type])
  @@index([nextDue])
  @@index([meterType])
}

model WorkOrderTask {
  id            Int                  @id @default(autoincrement())
  workOrderId   Int
  pmTaskId      Int?
  title         String
  description   String?
  procedure     String?
  orderIndex    Int                  @default(0)
  status        TaskCompletionStatus @default(NOT_STARTED)
  completedById Int?
  completedAt   DateTime?
  notes         String?
  actualMinutes Int?
  requiresSign  Boolean              @default(false)
  signedById    Int?
  signedAt      DateTime?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  completedBy   User?                @relation("TaskCompletedBy", fields: [completedById], references: [id])
  pmTask        PMTask?              @relation(fields: [pmTaskId], references: [id])
  signedBy      User?                @relation("TaskSignedBy", fields: [signedById], references: [id])
  workOrder     WorkOrder            @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([status])
  @@index([completedById])
  @@index([pmTaskId])
}

model MeterReading {
  id           Int       @id @default(autoincrement())
  assetId      Int
  meterType    MeterType
  value        Float
  unit         String?
  readingDate  DateTime  @default(now())
  recordedById Int?
  notes        String?
  isAutomatic  Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  asset        Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
  recordedBy   User?     @relation("MeterReadingRecordedBy", fields: [recordedById], references: [id])

  @@index([assetId, meterType])
  @@index([readingDate])
  @@index([meterType])
  @@index([assetId, meterType, readingDate])
}

model PMScheduleTask {
  id           Int        @id @default(autoincrement())
  pmScheduleId Int
  pmTaskId     Int
  orderIndex   Int        @default(0)
  isRequired   Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  pmSchedule   PMSchedule @relation(fields: [pmScheduleId], references: [id], onDelete: Cascade)
  pmTask       PMTask     @relation(fields: [pmTaskId], references: [id], onDelete: Cascade)

  @@unique([pmScheduleId, pmTaskId])
  @@index([pmScheduleId])
  @@index([pmTaskId])
}

model MaintenanceHistory {
  id              Int             @id @default(autoincrement())
  assetId         Int
  workOrderId     Int?
  pmScheduleId    Int?
  type            MaintenanceType
  title           String
  description     String?
  performedById   Int?
  performedAt     DateTime        @default(now())
  durationMinutes Int?
  laborCost       Float?
  partsCost       Float?
  totalCost       Float?
  isCompleted     Boolean         @default(false)
  completedAt     DateTime?
  notes           String?
  attachments     Json?
  signedById      Int?
  signedAt        DateTime?
  complianceNotes String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  asset           Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)
  performedBy     User?           @relation("MaintenancePerformedBy", fields: [performedById], references: [id])
  pmSchedule      PMSchedule?     @relation(fields: [pmScheduleId], references: [id])
  signedBy        User?           @relation("MaintenanceSignedBy", fields: [signedById], references: [id])
  workOrder       WorkOrder?      @relation(fields: [workOrderId], references: [id])

  @@index([assetId])
  @@index([workOrderId])
  @@index([pmScheduleId])
  @@index([type])
  @@index([performedAt])
  @@index([performedById])
  @@index([isCompleted])
}

model Portal {
  id                   Int                @id @default(autoincrement())
  name                 String
  description          String?
  type                 PortalType
  status               PortalStatus       @default(ACTIVE)
  slug                 String             @unique
  organizationId       Int
  isActive             Boolean            @default(true)
  allowAnonymous       Boolean            @default(true)
  requiresApproval     Boolean            @default(false)
  autoCreateWorkOrders Boolean            @default(true)
  maxSubmissionsPerDay Int?
  publicUrl            String?
  qrCodeUrl            String?
  qrEnabled            Boolean            @default(true)
  primaryColor         String             @default("#1976d2")
  secondaryColor       String             @default("#ffffff")
  accentColor          String             @default("#f50057")
  logoUrl              String?
  backgroundImageUrl   String?
  customCss            String?
  notificationEmails   String?
  autoResponderEnabled Boolean            @default(true)
  autoResponderMessage String?
  rateLimitEnabled     Boolean            @default(true)
  rateLimitRequests    Int                @default(100)
  rateLimitWindow      Int                @default(3600)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  analytics            PortalAnalytics[]
  fields               PortalField[]
  submissions          PortalSubmission[]

  @@index([organizationId])
  @@index([status])
  @@index([type])
  @@index([slug])
}

model PortalField {
  id               Int       @id @default(autoincrement())
  portalId         Int
  name             String
  label            String
  type             FieldType
  orderIndex       Int       @default(0)
  isRequired       Boolean   @default(false)
  placeholder      String?
  helpText         String?
  options          Json?
  validations      Json?
  conditionalLogic Json?
  width            String?
  cssClasses       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  portal           Portal    @relation(fields: [portalId], references: [id], onDelete: Cascade)

  @@index([portalId])
  @@index([orderIndex])
}

model PortalSubmission {
  id             Int                   @id @default(autoincrement())
  portalId       Int
  trackingCode   String                @unique
  status         SubmissionStatus      @default(SUBMITTED)
  submissionData Json
  attachments    Json?
  submitterName  String?
  submitterEmail String?
  submitterPhone String?
  submitterIp    String?
  userAgent      String?
  assignedToId   Int?
  reviewNotes    String?
  internalNotes  String?
  reviewedAt     DateTime?
  completedAt    DateTime?
  workOrderId    Int?
  assetId        Int?
  locationId     Int?
  priority       WorkOrderPriority     @default(MEDIUM)
  category       String?
  tags           String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  communications PortalCommunication[]
  asset          Asset?                @relation(fields: [assetId], references: [id])
  assignedTo     User?                 @relation(fields: [assignedToId], references: [id])
  location       Location?             @relation(fields: [locationId], references: [id])
  portal         Portal                @relation(fields: [portalId], references: [id], onDelete: Cascade)
  workOrder      WorkOrder?            @relation(fields: [workOrderId], references: [id])

  @@index([portalId])
  @@index([status])
  @@index([trackingCode])
  @@index([assignedToId])
  @@index([workOrderId])
  @@index([priority])
  @@index([createdAt])
}

model PortalCommunication {
  id             Int              @id @default(autoincrement())
  submissionId   Int
  message        String
  messageType    String           @default("MESSAGE")
  isInternal     Boolean          @default(false)
  sentById       Int?
  recipientEmail String?
  emailSent      Boolean          @default(false)
  emailSentAt    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  sentBy         User?            @relation(fields: [sentById], references: [id])
  submission     PortalSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@index([messageType])
  @@index([isInternal])
}

model PortalAnalytics {
  id                Int      @id @default(autoincrement())
  portalId          Int
  date              DateTime @default(now())
  views             Int      @default(0)
  submissions       Int      @default(0)
  completions       Int      @default(0)
  bounceRate        Float?
  avgCompletionTime Int?
  mobileViews       Int      @default(0)
  desktopViews      Int      @default(0)
  tabletViews       Int      @default(0)
  qrCodeScans       Int      @default(0)
  directAccess      Int      @default(0)
  referralAccess    Int      @default(0)
  country           String?
  region            String?
  city              String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  portal            Portal   @relation(fields: [portalId], references: [id], onDelete: Cascade)

  @@unique([portalId, date])
  @@index([portalId])
  @@index([date])
}

model Comment {
  id          Int       @id @default(autoincrement())
  entityType  String
  entityId    Int
  content     String
  isInternal  Boolean   @default(false)
  isPinned    Boolean   @default(false)
  userId      Int
  parentId    Int?
  attachments Json?
  editedAt    DateTime?
  editedById  Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  editedBy    User?     @relation("CommentEdits", fields: [editedById], references: [id])
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("CommentReplies")
  user        User      @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)

  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
  @@index([parentId])
}

model ImportHistory {
  id             Int          @id @default(autoincrement())
  importId       String       @unique
  entityType     String
  fileName       String?
  totalRows      Int
  importedCount  Int
  skippedCount   Int
  status         String       @default("COMPLETED")
  errors         Json?
  warnings       Json?
  duplicates     Json?
  columnMappings Json
  userId         Int
  organizationId Int
  canRollback    Boolean      @default(true)
  rolledBack     Boolean      @default(false)
  rolledBackAt   DateTime?
  rolledBackById Int?
  startedAt      DateTime     @default(now())
  completedAt    DateTime?
  durationMs     Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation("ImportHistory", fields: [organizationId], references: [id], onDelete: Cascade)
  rolledBackBy   User?        @relation("ImportRollback", fields: [rolledBackById], references: [id])
  user           User         @relation("ImportHistory", fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
  @@index([entityType])
  @@index([status])
  @@index([createdAt])
  @@index([importId])
}

model WorkOrderTimeLog {
  id          Int       @id @default(autoincrement())
  workOrderId Int
  userId      Int
  description String
  hours       Float
  category    String?
  billable    Boolean   @default(true)
  loggedAt    DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation("TimeLogUser", fields: [userId], references: [id], onDelete: Cascade)
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([workOrderId])
  @@index([userId])
  @@index([loggedAt])
}

model WorkOrderShare {
  id                   String          @id @default(cuid())
  workOrderId          Int
  organizationId       Int
  shareToken           String          @unique
  isActive             Boolean         @default(true)
  expiresAt            DateTime?
  maxViews             Int?
  currentViews         Int             @default(0)
  allowComments        Boolean         @default(true)
  allowDownload        Boolean         @default(false)
  viewerCanSeeAssignee Boolean         @default(false)
  sanitizationLevel    String          @default("STANDARD")
  createdById          Int
  lastAccessedAt       DateTime?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  comments             PublicComment[]
  auditLogs            ShareAuditLog[] @relation("ShareAuditLogs")
  createdBy            User            @relation("ShareCreator", fields: [createdById], references: [id], onDelete: Cascade)
  organization         Organization    @relation("WorkOrderShares", fields: [organizationId], references: [id], onDelete: Cascade)
  workOrder            WorkOrder       @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@index([shareToken])
  @@index([workOrderId])
  @@index([organizationId])
  @@index([expiresAt])
}

model PublicComment {
  id            String         @id @default(cuid())
  shareId       String
  content       String
  authorName    String?
  authorEmail   String?
  status        String         @default("PENDING")
  ipAddressHash String
  userAgent     String?
  moderatedById Int?
  moderatedAt   DateTime?
  flagCount     Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  moderatedBy   User?          @relation("CommentModerator", fields: [moderatedById], references: [id])
  share         WorkOrderShare @relation(fields: [shareId], references: [id], onDelete: Cascade)

  @@index([shareId])
  @@index([status])
  @@index([ipAddressHash])
}

model ShareAuditLog {
  id            String         @id @default(cuid())
  shareId       String
  action        String
  ipAddressHash String
  userAgent     String?
  timestamp     DateTime       @default(now())
  share         WorkOrderShare @relation("ShareAuditLogs", fields: [shareId], references: [id], onDelete: Cascade)

  @@index([shareId])
  @@index([timestamp])
  @@index([ipAddressHash])
}

model Notification {
  id                String               @id @default(cuid())
  title             String
  message           String
  type              NotificationType     @default(INFO)
  priority          NotificationPriority @default(MEDIUM)
  category          NotificationCategory @default(SYSTEM)
  userId            Int
  organizationId    Int
  isRead            Boolean              @default(false)
  readAt            DateTime?
  isArchived        Boolean              @default(false)
  archivedAt        DateTime?
  relatedEntityType String?
  relatedEntityId   Int?
  actionUrl         String?
  actionLabel       String?
  data              Json?
  imageUrl          String?
  expiresAt         DateTime?
  channels          Json?
  emailSent         Boolean              @default(false)
  emailSentAt       DateTime?
  smsSent           Boolean              @default(false)
  smsSentAt         DateTime?
  pushSent          Boolean              @default(false)
  pushSentAt        DateTime?
  createdById       Int?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  createdBy         User?                @relation("NotificationCreator", fields: [createdById], references: [id])
  user              User                 @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([isRead])
  @@index([category])
  @@index([priority])
  @@index([type])
  @@index([createdAt])
  @@index([expiresAt])
  @@index([relatedEntityType, relatedEntityId])
  @@index([userId, isRead])
  @@index([userId, category])
}

model NotificationPreference {
  id              Int                   @id @default(autoincrement())
  userId          Int
  organizationId  Int
  category        NotificationCategory
  channel         NotificationChannel
  frequency       NotificationFrequency @default(IMMEDIATE)
  enabled         Boolean               @default(true)
  quietHoursStart String?
  quietHoursEnd   String?
  weekdaysOnly    Boolean               @default(false)
  minimumPriority NotificationPriority  @default(LOW)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, channel])
  @@index([userId])
  @@index([category])
  @@index([channel])
}

model NotificationRule {
  id               Int                  @id @default(autoincrement())
  organizationId   Int
  name             String
  description      String?
  isActive         Boolean              @default(true)
  triggerType      String
  triggerCondition Json
  titleTemplate    String
  messageTemplate  String
  type             NotificationType     @default(INFO)
  priority         NotificationPriority @default(MEDIUM)
  category         NotificationCategory
  targetUsers      Json?
  channels         Json?
  cooldownMinutes  Int                  @default(0)
  maxPerDay        Int?
  actionUrl        String?
  actionLabel      String?
  lastTriggered    DateTime?
  triggerCount     Int                  @default(0)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt

  @@index([organizationId])
  @@index([triggerType])
  @@index([isActive])
}

model NotificationDelivery {
  id               String              @id @default(cuid())
  notificationId   String
  channel          NotificationChannel
  status           String              @default("PENDING")
  attemptedAt      DateTime            @default(now())
  deliveredAt      DateTime?
  failedAt         DateTime?
  errorMessage     String?
  errorCode        String?
  retryCount       Int                 @default(0)
  recipientAddress String?
  providerResponse Json?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  @@index([notificationId])
  @@index([channel])
  @@index([status])
  @@index([attemptedAt])
}

model NotificationDevice {
  id          String   @id @default(cuid())
  userId      Int
  deviceType  String
  deviceToken String   @unique
  deviceInfo  Json?
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deviceType])
  @@index([isActive])
}

model NotificationTemplate {
  id                 Int                  @id @default(autoincrement())
  organizationId     Int
  key                String
  name               String
  description        String?
  titleTemplate      String
  messageTemplate    String
  emailTemplate      String?
  smsTemplate        String?
  defaultType        NotificationType     @default(INFO)
  defaultPriority    NotificationPriority @default(MEDIUM)
  defaultCategory    NotificationCategory
  availableVariables Json
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@unique([organizationId, key])
  @@index([organizationId])
  @@index([key])
}

model QRCode {
  id               String                 @id @default(cuid())
  entityType       QRCodeType
  entityId         String
  entityName       String?
  secureToken      String                 @unique
  organizationId   Int
  qrCodeDataUrl    String?
  metadata         Json?
  status           QRCodeStatus           @default(ACTIVE)
  isPublic         Boolean                @default(false)
  allowedUserRoles Json?
  scanCount        Int                    @default(0)
  maxScans         Int?
  expiresAt        DateTime?
  lastScannedAt    DateTime?
  createdById      Int
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  batchOperations  QRBatchOperationItem[]
  createdBy        User                   @relation("QRCodeCreator", fields: [createdById], references: [id])
  organization     Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  scanLogs         QRScanLog[]

  @@index([entityType, entityId])
  @@index([organizationId])
  @@index([secureToken])
  @@index([status, expiresAt])
  @@index([createdById])
}

model QRScanLog {
  id             String            @id @default(cuid())
  qrCodeId       String
  userId         Int?
  sessionId      String?
  actionTaken    QRScanActionType?
  actionData     Json?
  ipAddress      String?
  userAgent      String?
  deviceType     String?
  location       Json?
  isSuccessful   Boolean           @default(true)
  errorCode      String?
  riskScore      Float?
  organizationId Int
  scannedAt      DateTime          @default(now())
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  qrCode         QRCode            @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)
  user           User?             @relation("QRScanLogs", fields: [userId], references: [id])

  @@index([qrCodeId, scannedAt])
  @@index([userId, scannedAt])
  @@index([organizationId, scannedAt])
  @@index([actionTaken])
  @@index([isSuccessful])
}

model QRBatchOperation {
  id              String                 @id @default(cuid())
  operationType   QRBatchOperationType
  status          QRBatchOperationStatus @default(PENDING)
  totalItems      Int
  processedItems  Int                    @default(0)
  successfulItems Int                    @default(0)
  failedItems     Int                    @default(0)
  options         Json?
  errorLog        Json?
  organizationId  Int
  createdById     Int
  startedAt       DateTime?
  completedAt     DateTime?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  createdBy       User                   @relation("QRBatchOperationCreator", fields: [createdById], references: [id])
  organization    Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  items           QRBatchOperationItem[]

  @@index([organizationId])
  @@index([createdById])
  @@index([status, createdAt])
}

model QRBatchOperationItem {
  id               String                 @id @default(cuid())
  batchOperationId String
  qrCodeId         String?
  entityType       QRCodeType
  entityId         String
  entityName       String?
  status           QRBatchOperationStatus @default(PENDING)
  errorMessage     String?
  resultData       Json?
  processedAt      DateTime?
  createdAt        DateTime               @default(now())
  batchOperation   QRBatchOperation       @relation(fields: [batchOperationId], references: [id], onDelete: Cascade)
  qrCode           QRCode?                @relation(fields: [qrCodeId], references: [id])

  @@index([batchOperationId])
  @@index([qrCodeId])
  @@index([status])
}

model QRTemplate {
  id              String        @id @default(cuid())
  name            String
  description     String?
  category        String
  dimensions      Json
  layout          String
  qrSize          Int
  fontSize        Json
  includeQRBorder Boolean       @default(true)
  customCSS       String?
  logoUrl         String?
  isPublic        Boolean       @default(true)
  organizationId  Int?
  createdById     Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  createdBy       User          @relation("QRTemplateCreator", fields: [createdById], references: [id])
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([category])
  @@index([isPublic])
}

enum UserRole {
  ADMIN
  MANAGER
  TECHNICIAN
}

enum WorkOrderStatus {
  OPEN
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELED
}

enum WorkOrderPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AssetStatus {
  ONLINE
  OFFLINE
}

enum AssetCriticality {
  LOW
  MEDIUM
  HIGH
  IMPORTANT
}

enum PMTriggerType {
  TIME_BASED
  USAGE_BASED
  CONDITION_BASED
  EVENT_BASED
}

enum TaskType {
  INSPECTION
  CLEANING
  LUBRICATION
  REPLACEMENT
  CALIBRATION
  TESTING
  REPAIR
  OTHER
}

enum TaskCompletionStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SKIPPED
  FAILED
}

enum MeterType {
  HOURS
  MILES
  CYCLES
  GALLONS
  TEMPERATURE
  PRESSURE
  VIBRATION
  OTHER
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
  INSPECTION
  CALIBRATION
}

enum PortalType {
  MAINTENANCE_REQUEST
  ASSET_REGISTRATION
  EQUIPMENT_INFO
  GENERAL_INQUIRY
  INSPECTION_REPORT
  SAFETY_INCIDENT
}

enum PortalStatus {
  ACTIVE
  INACTIVE
  DRAFT
  ARCHIVED
}

enum SubmissionStatus {
  SUBMITTED
  REVIEWED
  IN_PROGRESS
  COMPLETED
  REJECTED
  ASSIGNED
}

enum FieldType {
  TEXT
  TEXTAREA
  EMAIL
  PHONE
  NUMBER
  SELECT
  MULTI_SELECT
  RADIO
  CHECKBOX
  DATE
  TIME
  DATETIME
  FILE
  IMAGE
  LOCATION
  ASSET_PICKER
  USER_PICKER
  PRIORITY
  RATING
  SIGNATURE
  URL
  CURRENCY
}

enum PortalFieldValidationType {
  REQUIRED
  MIN_LENGTH
  MAX_LENGTH
  MIN_VALUE
  MAX_VALUE
  PATTERN
  EMAIL_FORMAT
  PHONE_FORMAT
  URL_FORMAT
  FILE_SIZE
  FILE_TYPE
}

enum NotificationType {
  ALERT
  WARNING
  INFO
  SUCCESS
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
  PUSH
}

enum NotificationCategory {
  WORK_ORDER
  ASSET
  MAINTENANCE
  INVENTORY
  USER
  SYSTEM
  PORTAL
}

enum NotificationFrequency {
  IMMEDIATE
  DIGEST
  DISABLED
}

enum QRCodeType {
  ASSET
  WORK_ORDER
  PM_SCHEDULE
  LOCATION
  USER
  PART
  PORTAL
}

enum QRCodeStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  REVOKED
}

enum QRScanActionType {
  VIEW
  EDIT
  CREATE_WORK_ORDER
  COMPLETE_TASK
  CHECK_IN
  SCHEDULE_PM
  UPDATE_STATUS
  ADD_NOTES
}

enum QRBatchOperationType {
  GENERATE
  REGENERATE
  DEACTIVATE
  EXPORT
}

enum QRBatchOperationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
